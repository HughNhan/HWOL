#!/bin/bash

set -o pipefail

export DURATION=${DURATION:-60}
export WSIZE=${WSIZE:-32000}
export RSIZE=${WSIZE:-512}
export NTHREADS=${NTHREADS:-16}
export OPTS=" -a -p"

HWOL_SERVERS=(1-server-w0 2-server-w4)
HWOL_CLIENTS=(1-client-w3.json 2-client-w0.json)

# normal
NO_SERVERS=(1-server-w1 2-server-w4)
NO_CLIENTS=(1-client-w3.json 2-client-w1.json)

# spec1: from normal swap driver placement
#NO_SERVERS=(1-server-w1 2-server-w3)
#NO_CLIENTS=(1-client-w4.json 2-client-w1.json)

#From nornal: change start order
#NO_SERVERS=(2-server-w4 1-server-w1)
#NO_CLIENTS=(2-client-w1.json 1-client-w3.json)

# 1 pair
#NO_SERVERS=(1-server-w1)
#NO_CLIENTS=(1-client-w3.json)


HWOL=false
CLEAN=false

function f_help {
    me=`basename "$0"`
    echo Usage: $me "[--clean --hwol]"
}

longopts="clean,hwol,help"
opts=$(getopt -q -o "" --longoptions "$longopts" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
    echo "Unrecognized option specified"
    exit
fi
eval set -- "$opts";
while true; do
    case "$1" in
        --clean)
            shift;
            CLEAN=true
            ;;
        --hwol)
            shift;
            HWOL=true
            ;;
        --)
            shift;
            break
            ;;
        --help)
            shift;
            f_help
            exit
            ;;

        *)
            echo "Invalid option: $1"
            exit
    esac
done

if [ "$CLEAN" == true ]; then
    (oc get pod --no-headers | awk '{print $1}' | xargs oc delete pod)
fi

function run-pair {
    if [ "$1" == "help" ]; then
        echo start-client 1-client-w1.json  1-server-w0
        exit
    fi

    until [ "$(oc get pod --no-headers  $2 -o wide | awk -F " " '{print $6}')" != "<none>" ]; do
        sleep 1
    done
    
    # grep "uperf -s -P 30000" to get the port numer, number after -P
    export PORT=$(grep -e "perf" $2.json |  grep -oP '(?<=-P )[^"]*')
    export DATAPORT=$((PORT+1))

    export SERVER_IP=$(oc get pod --no-headers  $2 -o wide | awk -F " " '{print $6}')
    envsubst < $1.template > $1

    #delete old client. -r to remove "" arounf name
    podname=$(cat $1 | jq -r '.metadata.name')
    if oc get pod $podname &> /dev/null; then
        oc delete pod $podname
    else
        echo no $podname
    fi
    oc apply -f $1 2>/dev/null
}

if [ "$HWOL" == true ]; then
    mode=hwol
    SERVERS=("${HWOL_SERVERS[@]}")
    CLIENTS=("${HWOL_CLIENTS[@]}")
else
    mode=no-hwol
    SERVERS=("${NO_SERVERS[@]}")
    CLIENTS=("${NO_CLIENTS[@]}")
fi


function run-servers {
  for i in ${!SERVERS[@]}; do
    # start servers if they are not there
    if ! oc get pod  ${SERVERS[$i]} &>/dev/null ; then
        if ! oc apply -f ${SERVERS[$i]}.json ; then
           echo failed to start ${SERVERS[$i]}.json
           exit
        fi
    fi
  done
}


function run-clients {
  for i in ${!SERVERS[@]}; do
    echo run ${CLIENTS[$i]} "===>" ${SERVERS[$i]}
    # start peer clients
    run-pair ${CLIENTS[$i]} ${SERVERS[$i]}
  done
}


function run-all {
  for i in ${!SERVERS[@]}; do
    # start servers if they are not there
    if ! oc get pod  ${SERVERS[$i]} &>/dev/null ; then
        if ! oc apply -f ${SERVERS[$i]}.json ; then
           echo failed to start ${SERVERS[$i]}.json
           exit
        fi
    fi
    echo run ${CLIENTS[$i]} "===>"  ${SERVERS[$i]}
    # start peer clients
    run-pair ${CLIENTS[$i]} ${SERVERS[$i]}
  done
}

run_state=1

function is-run-complete {
    for i in ${CLIENTS[@]}; do
      podname=$(cat $i | jq -r '.metadata.name')
      # oc get pod $podname -o json |  jq -r '.status.containerStatuses[].state.terminated' 
      if [ $(oc get pod $podname -o jsonpath="{.status.phase}") != Succeeded ]; then
        # this one is not terminated
        #echo $podname not complete
        run_state=1
        return
      fi
    done
    # all terminated
    run_state=0
}

function wait-run-complete {
    count=$DURATION
    count=$((count+10))
    echo -n "wait for completion up to $count seconds "
    #until [ "$(is-run-complete 2>&1)" == "1" ]; do
    until [ "$run_state" == "0" ]; do
        is-run-complete 2>&1
        sleep 1
        echo -n "."
        ((count--))
        if [ $count -le 0 ]; then
           return;
        fi
    done
}


function  get_results {
    is-run-complete
    if [ "$run_state" == 0  ] ; then
        for i in ${CLIENTS[@]}; do
            podname=$(cat $i | jq -r '.metadata.name')
            echo " "
            echo --- short result of $i:
            oc logs $podname | tail -n10
        done
    fi
}
echo mode=$mode, DURATION=${DURATION}, NTHREADS=${NTHREADS}, WSIZE=${WSIZE}, RSIZE=${WSIZE}

#run-servers
#run-all
run-servers
run-clients
sleep 10
wait-run-complete
get_results

# EOF
